#!/usr/bin/env node

const http = require('http')
const debug = require('debug')('demo:server')
const app = require('../src/app')
const syncDb = require('../src/db/seq/utils/sync-alter')

function normalizePort(val) {
    const port = parseInt(val, 10)

    if (Number.isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

const port = normalizePort(process.env.PORT || '3000')

const server = http.createServer(app.callback())

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`

    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`)
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`)
            process.exit(1)
            break
        default:
            throw error
    }
}

function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
    debug(`Listening on ${bind}`)
}

// 先同步 mysql 数据表
syncDb()
    .then(() => {
        // 再启动服务
        server.listen(port)
        server.on('error', onError)
        server.on('listening', onListening)
    })
    .catch(() => {})
